// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// @ LonesomeTheBlue
// @ veryfid
// @ Koaen
//@version=5
indicator('Divergent Signals', overlay=true, max_bars_back=1000, max_lines_count=400, max_labels_count=400)

// To add more indicators search for sections with ##MODIFY##

// ##################################################################
// ##MODIFY##
// Increment indicator count
indicatorCount = 18
// ##################################################################

prd = input.int(defval=5, title='Pivot Period', minval=1, maxval=50)
source = input.string(defval='Close', title='Source for Pivot Points', options=['Close', 'High/Low'])
searchdiv = input.string(defval='Regular/Hidden', title='Divergence Type', options=['Regular', 'Hidden', 'Regular/Hidden'])
showindis = input.string(defval='Full', title='Show Indicator Names', options=['Full', 'First Letter', 'Don\'t Show'])
labelSize = input.string(defval=size.tiny, title='Indicator Size', options=[size.tiny, size.small, size.normal])
labelStyle = input.string(defval='None', title='Indicator Style', options=['None', 'Label'])
showlimit = input.int(2, title='Minimum Number of Divergence', minval=1, maxval=indicatorCount)
maxpp = input.int(defval=10, title='Maximum Pivot Points to Check', minval=1, maxval=20)
maxbars = input.int(defval=100, title='Maximum Bars to Check', minval=30, maxval=200)
shownum = input.bool(defval=true, title='Show Divergence Number')
showlast = input.bool(defval=false, title='Show Only Last Divergence')
dontconfirm = input.bool(defval=true, title='Don\'t Wait for Confirmation')
showlines = input.bool(defval=false, title='Show Divergence Lines')
showpivot = input.bool(defval=false, title='Show Pivot Points')

// ##################################################################
// ##MODIFY##
// Added indicator Inputs
calcmacd = input.bool(defval=true, title='MACD')
calcmacda = input.bool(defval=true, title='MACD Histogram')
calcrsi = input.bool(defval=true, title='Relative Strength Index')
calcstoc = input.bool(defval=true, title='Stochastic')
calccci = input.bool(defval=true, title='Commodity Channel Index')
calcmom = input.bool(defval=true, title='Momentum')
calcobv = input.bool(defval=true, title='On-Balance Volume')
calcvwmacd = input.bool(true, title='Volume Weighted MACD')
calccmf = input.bool(true, title='Chaikin Money Flow')
calcmfi = input.bool(true, title='Money Flow Index')
calcawe = input.bool(true, title='Awesome Oscillator')
calcacc = input.bool(true, title='Awesome Accelerator')
calcrvi = input.bool(true, title='Relative Volatility Index')
calccog = input.bool(true, title='Center of Gravity')
calcmama = input.bool(true, title='MAMA')
calcfama = input.bool(true, title='FAMA')
calckama = input.bool(true, title='KAMA')
// ##################################################################

calcext = input.bool(false, title = "Check External Indicator")
externalindi = input.source(defval=close, title="External Indicator")
pos_reg_div_col = input.color(defval=color.yellow, title='Positive Regular Divergence')
neg_reg_div_col = input.color(defval=color.navy, title='Negative Regular Divergence')
pos_hid_div_col = input.color(defval=color.lime, title='Positive Hidden Divergence')
neg_hid_div_col = input.color(defval=color.red, title='Negative Hidden Divergence')
pos_div_text_col = input.color(defval=color.lime, title='Positive Divergence Text Color')
neg_div_text_col = input.color(defval=color.red, title='Negative Divergence Text Color')
reg_div_l_style_ = input.string(defval='Solid', title='Regular Divergence Line Style', options=['Solid', 'Dashed', 'Dotted'])
hid_div_l_style_ = input.string(defval='Dashed', title='Hdden Divergence Line Style', options=['Solid', 'Dashed', 'Dotted'])
reg_div_l_width = input.int(defval=2, title='Regular Divergence Line Width', minval=1, maxval=5)
hid_div_l_width = input.int(defval=1, title='Hidden Divergence Line Width', minval=1, maxval=5)
showmas = input.bool(defval=false, title='Show MAs 50 & 200', inline='ma12')
cma1col = input.color(defval=color.lime, title='', inline='ma12')
cma2col = input.color(defval=color.red, title='', inline='ma12')

plot(showmas ? ta.sma(close, 50) : na, color=cma1col)
plot(showmas ? ta.sma(close, 200) : na, color=cma2col)

// set line styles
var reg_div_l_style = reg_div_l_style_ == 'Solid' ? line.style_solid : reg_div_l_style_ == 'Dashed' ? line.style_dashed : line.style_dotted
var hid_div_l_style = hid_div_l_style_ == 'Solid' ? line.style_solid : hid_div_l_style_ == 'Dashed' ? line.style_dashed : line.style_dotted


// ##################################################################
// ##MODIFY##
// Indicator functions

// Relative Volatility Index
relativeVolatility() =>
    stddev = ta.stdev(close, 10)
    upper = ta.ema(ta.change(close) <= 0 ? 0 : stddev, 14)
    lower = ta.ema(ta.change(close) > 0 ? 0 : stddev, 14)
    upper / (upper + lower) * 100

// Accelerator Oscillator and Awesome Oscillator
awesome() =>
    ao = ta.sma(hl2,5) - ta.sma(hl2,34)
    ac = ao - ta.sma(ao, 5)
    [ao, ac]
    
mama() =>
    // Adapted from https://www.tradingview.com/script/KblVyjf3-MAMA-FAMA-KAMA/ into a single method
    
    len = 20 // input(20, title='Length')
    src = close //input(close, title='Source')
    PI = 2 * math.asin(1)
    
    fastLimit = math.abs(ta.change(src, len)) / math.sum(math.abs(ta.change(src)), len)
    slowLimit = fastLimit * 0.1
    
    mesaPeriod = 0.0
    mesaPeriodMult = 0.075 * nz(mesaPeriod[1]) + 0.54

    smooth = 0.0
    smooth := (4 * src + 3 * nz(src[1]) + 2 * nz(src[2]) + nz(src[3])) / 10

    detrender = 0.0
    // detrender := computeComponent(smooth, mesaPeriodMult)
    detrender := (0.0962 * smooth + 0.5769 * nz(smooth) - 0.5769 * nz(smooth[4]) - 0.0962 * nz(smooth)) * mesaPeriodMult

    // Compute InPhase and Quadrature components
    I1 = nz(detrender[3])
    // Q1 = computeComponent(detrender, mesaPeriodMult)
    Q1 = (0.0962 * detrender + 0.5769 * nz(detrender[2]) - 0.5769 * nz(detrender[4]) - 0.0962 * nz(detrender[6])) * mesaPeriodMult

    // Advance the phase of I1 and Q1 by 90 degrees
    // jI = computeComponent(I1, mesaPeriodMult)
    jI = (0.0962 * I1 + 0.5769 * nz(I1[2]) - 0.5769 * nz(I1[4]) - 0.0962 * nz(I1[6])) * mesaPeriodMult
    // jQ = computeComponent(Q1, mesaPeriodMult)
    jQ = (0.0962 * Q1 + 0.5769 * nz(Q1[2]) - 0.5769 * nz(Q1[4]) - 0.0962 * nz(Q1[6])) * mesaPeriodMult

    I2 = 0.0
    Q2 = 0.0

    // Phasor addition for 3 bar averaging
    I2 := I1 - jQ
    Q2 := Q1 + jI

    // Smooth the I and Q components before applying the discriminator
    I2 := 0.2 * I2 + 0.8 * nz(I2[1])
    Q2 := 0.2 * Q2 + 0.8 * nz(Q2[1])

    // Homodyne Discriminator
    Re = I2 * nz(I2[1]) + Q2 * nz(Q2[1])
    Im = I2 * nz(Q2[1]) - Q2 * nz(I2[1])

    Re := 0.2 * Re + 0.8 * nz(Re[1])
    Im := 0.2 * Im + 0.8 * nz(Im[1])

    if Re != 0 and Im != 0
        mesaPeriod := 2 * PI / math.atan(Im / Re)
        mesaPeriod

    if mesaPeriod > 1.5 * nz(mesaPeriod[1])
        mesaPeriod := 1.5 * nz(mesaPeriod[1])
        mesaPeriod

    if mesaPeriod < 0.67 * nz(mesaPeriod[1])
        mesaPeriod := 0.67 * nz(mesaPeriod[1])
        mesaPeriod

    if mesaPeriod < 6
        mesaPeriod := 6
        mesaPeriod

    if mesaPeriod > 50
        mesaPeriod := 50
        mesaPeriod

    mesaPeriod := 0.2 * mesaPeriod + 0.8 * nz(mesaPeriod[1])

    phase = 0.0

    if I1 != 0
        phase := 180 / PI * math.atan(Q1 / I1)
        phase

    deltaPhase = nz(phase[1]) - phase

    if deltaPhase < 1
        deltaPhase := 1
        deltaPhase

    alpha = fastLimit / deltaPhase

    if alpha < slowLimit
        alpha := slowLimit
        alpha
    
    a = alpha
    b = alpha / 2.0
    
    mama = 0.0
    mama := a * src + (1 - a) * nz(mama[1])
    
    fama = 0.0
    fama := b * mama + (1 - b) * nz(fama[1])
    
    alpha := math.pow(fastLimit * (b - a) + a, 2)
    kama = 0.0
    kama := alpha * src + (1 - alpha) * nz(kama[1])
    
    [mama, fama, kama]
    
chaikin() =>
    Cmfm = (close - low - (high - close)) / (high - low)
    Cmfv = Cmfm * volume
    ta.sma(Cmfv, 21) / ta.sma(volume, 21)

// ##################################################################


// ##################################################################
// ##MODIFY##
// Indicator calls
rsi = ta.rsi(close, 14)  // RSI
[macd, macdSignal, macdHist] = ta.macd(close, 12, 26, 9)  // MACD
moment = ta.mom(close, 10)  // Momentum
cci = ta.cci(close, 10)  // CCI
obv = ta.obv  // OBV
stk = ta.sma(ta.stoch(close, high, low, 14), 3)  // Stoch
vwmacd = ta.vwma(close, 12) - ta.vwma(close, 26) // volume weighted macd
cmf = chaikin() // Chaikin money flow
mfi = ta.mfi(close, 14)  // Money Flow Index
[ao, ac] = awesome() // Awesome Oscillator and Awesome Accelerator
rvi = relativeVolatility() // Relative Volatility Index
cog = ta.cog(close, 11) // Center of Gravity
[mama, fama, kama] = mama() // MAMA, FAMA, KAMA

// ##################################################################

// ##################################################################
// ##MODIFY##
// Pullback functions
// macdPullback() =>
//     slow = input(26, "MACD Short period")
//     fast = input(12, "MACD Long period")
//     //signal = input(9, "Smoothing period")
//     MACD = ema(close, fast) - ema(close, slow)
//     ema_1 = ema(MACD, 5)
//     dMACD = MACD < 0 ? ema_1 : 0
    
//     Mcond = rising(dMACD, 1)
//     mcount = 0.0
//     mcount := Mcond ? nz(mcount[1]) + 1 : nz(mcount[1])
//     counter = 0
//     counter := mcount - mcount[1] == 0 ? nz(counter[1]) + 1 : 0
//     //counter := counter==3 ? 0: nz(counter[1])
//     pp = 0.0
//     mc = 0.0
//     pp := counter - counter[1] < 0 ? close[1] : nz(pp[1])
//     mc := counter - counter[1] < 0 ? macd[1] : nz(mc[1])
    
//     bull = pp - pp[1] < -close * 0.01 and mc - mc[1] > 0.05 * abs(MACD) and dMACD[2] < 0 ? 1 : 0

// ##################################################################

// ##################################################################
// ##MODIFY##
// Pullback calls

// ##################################################################
// ##MODIFY##
// Pullback display

// ##################################################################

// keep indicators names and colors in arrays
var indicators_name = array.new_string(indicatorCount)
var div_colors = array.new_color(4)
if barstate.isfirst
    // ##################################################################
    // ##MODIFY##
    // Indicator names
    array.set(indicators_name, 0, showindis == "Full" ? "Extrn" : "X")
    array.set(indicators_name, 1, showindis == 'Full' ? 'MACD' : 'M')
    array.set(indicators_name, 2, showindis == 'Full' ? 'Hist' : 'H')
    array.set(indicators_name, 3, showindis == 'Full' ? 'RSI' : 'R')
    array.set(indicators_name, 4, showindis == 'Full' ? 'Stoch' : 'ST')
    array.set(indicators_name, 5, showindis == 'Full' ? 'CCI' : 'C')
    array.set(indicators_name, 6, showindis == 'Full' ? 'MOM' : 'M')
    array.set(indicators_name, 7, showindis == 'Full' ? 'OBV' : 'O')
    array.set(indicators_name, 8, showindis == 'Full' ? 'VWMACD' : 'V')
    array.set(indicators_name, 9, showindis == 'Full' ? 'CMF' : 'C')
    array.set(indicators_name, 10, showindis == 'Full' ? 'MFI' : 'MF')
    array.set(indicators_name, 11, showindis == 'Full' ? 'Awesome' : 'AW')
    array.set(indicators_name, 12, showindis == 'Full' ? 'Accel' : 'AC')
    array.set(indicators_name, 13, showindis == 'Full' ? 'RVI' : 'R')
    array.set(indicators_name, 14, showindis == 'Full' ? 'COG' : 'CO')
    array.set(indicators_name, 15, showindis == 'Full' ? 'MAMA' : 'MA')
    array.set(indicators_name, 16, showindis == 'Full' ? 'FAMA' : 'FA')
    array.set(indicators_name, 17, showindis == 'Full' ? 'KAMA' : 'KA')
    // ##################################################################
    //colors
    array.set(div_colors, 0, pos_reg_div_col)
    array.set(div_colors, 1, neg_reg_div_col)
    array.set(div_colors, 2, pos_hid_div_col)
    array.set(div_colors, 3, neg_hid_div_col)

// Check if we get new Pivot High Or Pivot Low
float ph = ta.pivothigh(source == 'Close' ? close : high, prd, prd)
float pl = ta.pivotlow(source == 'Close' ? close : low, prd, prd)
plotshape(ph and showpivot, text='H', style=shape.labeldown, color=color.new(color.white, 100), textcolor=color.new(color.red, 0), location=location.abovebar, offset=-prd)
plotshape(pl and showpivot, text='L', style=shape.labelup, color=color.new(color.white, 100), textcolor=color.new(color.lime, 0), location=location.belowbar, offset=-prd)

// keep values and positions of Pivot Highs/Lows in the arrays
var int maxarraysize = 20
var ph_positions = array.new_int(maxarraysize, 0)
var pl_positions = array.new_int(maxarraysize, 0)
var ph_vals = array.new_float(maxarraysize, 0.)
var pl_vals = array.new_float(maxarraysize, 0.)

// // add PHs to the array
if ph
    array.unshift(ph_positions, bar_index)
    array.unshift(ph_vals, ph)
    if array.size(ph_positions) > maxarraysize
        array.pop(ph_positions)
        array.pop(ph_vals)

// add PLs to the array
if pl
    array.unshift(pl_positions, bar_index)
    array.unshift(pl_vals, pl)
    if array.size(pl_positions) > maxarraysize
        array.pop(pl_positions)
        array.pop(pl_vals)

// functions to check Regular Divergences and Hidden Divergences

// function to check positive regular or negative hidden divergence
// cond == 1 => positive_regular, cond == 2=> negative_hidden
positive_regular_positive_hidden_divergence(src, cond) =>
    divlen = 0
    prsc = source == 'Close' ? close : low
    // if indicators higher than last value and close price is higher than las close 
    if dontconfirm or src > src[1] or close > close[1]
        startpoint = dontconfirm ? 0 : 1  // don't check last candle
        // we search last 15 PPs
        for x = 0 to maxpp - 1 by 1
            len = bar_index - array.get(pl_positions, x) + prd
            // if we reach non valued array element or arrived 101. or previous bars then we don't search more
            if array.get(pl_positions, x) == 0 or len > maxbars
                break
            if len > 5 and (cond == 1 and src[startpoint] > src[len] and prsc[startpoint] < nz(array.get(pl_vals, x)) or cond == 2 and src[startpoint] < src[len] and prsc[startpoint] > nz(array.get(pl_vals, x)))
                slope1 = (src[startpoint] - src[len]) / (len - startpoint)
                virtual_line1 = src[startpoint] - slope1
                slope2 = (close[startpoint] - close[len]) / (len - startpoint)
                virtual_line2 = close[startpoint] - slope2
                arrived = true
                for y = 1 + startpoint to len - 1 by 1
                    if src[y] < virtual_line1 or nz(close[y]) < virtual_line2
                        arrived := false
                        break
                    virtual_line1 -= slope1
                    virtual_line2 -= slope2
                    virtual_line2

                if arrived
                    divlen := len
                    break
    divlen

// function to check negative regular or positive hidden divergence
// cond == 1 => negative_regular, cond == 2=> positive_hidden
negative_regular_negative_hidden_divergence(src, cond) =>
    divlen = 0
    prsc = source == 'Close' ? close : high
    // if indicators higher than last value and close price is higher than las close 
    if dontconfirm or src < src[1] or close < close[1]
        startpoint = dontconfirm ? 0 : 1  // don't check last candle
        // we search last 15 PPs
        for x = 0 to maxpp - 1 by 1
            len = bar_index - array.get(ph_positions, x) + prd
            // if we reach non valued array element or arrived 101. or previous bars then we don't search more
            if array.get(ph_positions, x) == 0 or len > maxbars
                break
            if len > 5 and (cond == 1 and src[startpoint] < src[len] and prsc[startpoint] > nz(array.get(ph_vals, x)) or cond == 2 and src[startpoint] > src[len] and prsc[startpoint] < nz(array.get(ph_vals, x)))
                slope1 = (src[startpoint] - src[len]) / (len - startpoint)
                virtual_line1 = src[startpoint] - slope1
                slope2 = (close[startpoint] - nz(close[len])) / (len - startpoint)
                virtual_line2 = close[startpoint] - slope2
                arrived = true
                for y = 1 + startpoint to len - 1 by 1
                    if src[y] > virtual_line1 or nz(close[y]) > virtual_line2
                        arrived := false
                        break
                    virtual_line1 -= slope1
                    virtual_line2 -= slope2
                    virtual_line2

                if arrived
                    divlen := len
                    break
    divlen

// calculate 4 types of divergence if enabled in the options and return divergences in an array
calculate_divs(cond, indicator_1) =>
    divs = array.new_int(4, 0)
    array.set(divs, 0, cond and (searchdiv == 'Regular' or searchdiv == 'Regular/Hidden') ? positive_regular_positive_hidden_divergence(indicator_1, 1) : 0)
    array.set(divs, 1, cond and (searchdiv == 'Regular' or searchdiv == 'Regular/Hidden') ? negative_regular_negative_hidden_divergence(indicator_1, 1) : 0)
    array.set(divs, 2, cond and (searchdiv == 'Hidden' or searchdiv == 'Regular/Hidden') ? positive_regular_positive_hidden_divergence(indicator_1, 2) : 0)
    array.set(divs, 3, cond and (searchdiv == 'Hidden' or searchdiv == 'Regular/Hidden') ? negative_regular_negative_hidden_divergence(indicator_1, 2) : 0)
    divs

// array to keep all divergences
var all_divergences = array.new_int(indicatorCount*4)  // 14 indicators * 4 divergence = 56 elements
// set related array elements
array_set_divs(div_pointer, index) =>
    for x = 0 to 3 by 1
        array.set(all_divergences, index * 4 + x, array.get(div_pointer, x))

// ##################################################################
// ##MODIFY##
// set divergences array 
array_set_divs(calculate_divs(calcext, externalindi), 0)
array_set_divs(calculate_divs(calcmacd, macd), 1)
array_set_divs(calculate_divs(calcmacda, macdHist), 2)
array_set_divs(calculate_divs(calcrsi, rsi), 3)
array_set_divs(calculate_divs(calcstoc, stk), 4)
array_set_divs(calculate_divs(calccci, cci), 5)
array_set_divs(calculate_divs(calcmom, moment), 6)
array_set_divs(calculate_divs(calcobv, obv), 7)
array_set_divs(calculate_divs(calcvwmacd, vwmacd), 8)
array_set_divs(calculate_divs(calccmf, cmf), 9)
array_set_divs(calculate_divs(calcmfi, mfi), 10)
array_set_divs(calculate_divs(calcawe, ao), 11)
array_set_divs(calculate_divs(calcacc, ac), 12)
array_set_divs(calculate_divs(calcrvi, rvi), 13)
array_set_divs(calculate_divs(calccog, cog), 14)
array_set_divs(calculate_divs(calcmama, mama), 15)
array_set_divs(calculate_divs(calcfama, fama), 16)
array_set_divs(calculate_divs(calcfama, kama), 17)
// ##################################################################

// check minimum number of divergence, if less than showlimit then delete all divergence
total_div = 0
for x = 0 to array.size(all_divergences) - 1 by 1
    total_div += math.round(math.sign(array.get(all_divergences, x)))
    total_div

if total_div < showlimit
    array.fill(all_divergences, 0)

// keep line in an array
var pos_div_lines = array.new_line(0)
var neg_div_lines = array.new_line(0)
var pos_div_labels = array.new_label(0)
var neg_div_labels = array.new_label(0)

// remove old lines and labels if showlast option is enabled
delete_old_pos_div_lines() =>
    if array.size(pos_div_lines) > 0
        for j = 0 to array.size(pos_div_lines) - 1 by 1
            line.delete(array.get(pos_div_lines, j))
        array.clear(pos_div_lines)

delete_old_neg_div_lines() =>
    if array.size(neg_div_lines) > 0
        for j = 0 to array.size(neg_div_lines) - 1 by 1
            line.delete(array.get(neg_div_lines, j))
        array.clear(neg_div_lines)

delete_old_pos_div_labels() =>
    if array.size(pos_div_labels) > 0
        for j = 0 to array.size(pos_div_labels) - 1 by 1
            label.delete(array.get(pos_div_labels, j))
        array.clear(pos_div_labels)

delete_old_neg_div_labels() =>
    if array.size(neg_div_labels) > 0
        for j = 0 to array.size(neg_div_labels) - 1 by 1
            label.delete(array.get(neg_div_labels, j))
        array.clear(neg_div_labels)

// delete last creted lines and labels until we met new PH/PV 
delete_last_pos_div_lines_label(n) =>
    if n > 0 and array.size(pos_div_lines) >= n
        asz = array.size(pos_div_lines)
        for j = 1 to n by 1
            line.delete(array.get(pos_div_lines, asz - j))
            array.pop(pos_div_lines)
        if array.size(pos_div_labels) > 0
            label.delete(array.get(pos_div_labels, array.size(pos_div_labels) - 1))
            array.pop(pos_div_labels)

delete_last_neg_div_lines_label(n) =>
    if n > 0 and array.size(neg_div_lines) >= n
        asz = array.size(neg_div_lines)
        for j = 1 to n by 1
            line.delete(array.get(neg_div_lines, asz - j))
            array.pop(neg_div_lines)
        if array.size(neg_div_labels) > 0
            label.delete(array.get(neg_div_labels, array.size(neg_div_labels) - 1))
            array.pop(neg_div_labels)

// variables for Alerts
pos_reg_div_detected = false
neg_reg_div_detected = false
pos_hid_div_detected = false
neg_hid_div_detected = false

// to remove lines/labels until we met new // PH/PL
var last_pos_div_lines = 0
var last_neg_div_lines = 0
var remove_last_pos_divs = false
var remove_last_neg_divs = false
if pl
    remove_last_pos_divs := false
    last_pos_div_lines := 0
    last_pos_div_lines
if ph
    remove_last_neg_divs := false
    last_neg_div_lines := 0
    last_neg_div_lines

// draw divergences lines and labels
divergence_text_top = ''
divergence_text_bottom = ''
distances = array.new_int(0)
dnumdiv_top = 0
dnumdiv_bottom = 0
top_label_col = color.white
bottom_label_col = color.white
old_pos_divs_can_be_removed = true
old_neg_divs_can_be_removed = true
startpoint = dontconfirm ? 0 : 1  // used for don't confirm option

for x = 0 to indicatorCount-1 by 1
    div_type = -1
    for y = 0 to 3 by 1
        if array.get(all_divergences, x * 4 + y) > 0  // any divergence?
            div_type := y
            if y % 2 == 1
                dnumdiv_top += 1
                top_label_col := array.get(div_colors, y)
                top_label_col
            if y % 2 == 0
                dnumdiv_bottom += 1
                bottom_label_col := array.get(div_colors, y)
                bottom_label_col
            if not array.includes(distances, array.get(all_divergences, x * 4 + y))  // line not exist ?
                array.push(distances, array.get(all_divergences, x * 4 + y))
                new_line = showlines ? line.new(x1=bar_index - array.get(all_divergences, x * 4 + y), y1=source == 'Close' ? close[array.get(all_divergences, x * 4 + y)] : y % 2 == 0 ? low[array.get(all_divergences, x * 4 + y)] : high[array.get(all_divergences, x * 4 + y)], x2=bar_index - startpoint, y2=source == 'Close' ? close[startpoint] : y % 2 == 0 ? low[startpoint] : high[startpoint], color=array.get(div_colors, y), style=y < 2 ? reg_div_l_style : hid_div_l_style, width=y < 2 ? reg_div_l_width : hid_div_l_width) : na
                if y % 2 == 0
                    if old_pos_divs_can_be_removed
                        old_pos_divs_can_be_removed := false
                        if not showlast and remove_last_pos_divs
                            delete_last_pos_div_lines_label(last_pos_div_lines)
                            last_pos_div_lines := 0
                            last_pos_div_lines
                        if showlast
                            delete_old_pos_div_lines()
                    array.push(pos_div_lines, new_line)
                    last_pos_div_lines += 1
                    remove_last_pos_divs := true
                    remove_last_pos_divs

                if y % 2 == 1
                    if old_neg_divs_can_be_removed
                        old_neg_divs_can_be_removed := false
                        if not showlast and remove_last_neg_divs
                            delete_last_neg_div_lines_label(last_neg_div_lines)
                            last_neg_div_lines := 0
                            last_neg_div_lines
                        if showlast
                            delete_old_neg_div_lines()
                    array.push(neg_div_lines, new_line)
                    last_neg_div_lines += 1
                    remove_last_neg_divs := true
                    remove_last_neg_divs

            // set variables for alerts
            if y == 0
                pos_reg_div_detected := true
                pos_reg_div_detected
            if y == 1
                neg_reg_div_detected := true
                neg_reg_div_detected
            if y == 2
                pos_hid_div_detected := true
                pos_hid_div_detected
            if y == 3
                neg_hid_div_detected := true
                neg_hid_div_detected
    // get text for labels
    if div_type >= 0
        divergence_text_top += (div_type % 2 == 1 ? showindis != 'Don\'t Show' ? array.get(indicators_name, x) + '\n' : '' : '')
        divergence_text_bottom += (div_type % 2 == 0 ? showindis != 'Don\'t Show' ? array.get(indicators_name, x) + '\n' : '' : '')
        divergence_text_bottom


// draw labels
if showindis != 'Don\'t Show' or shownum
    if shownum and dnumdiv_top > 0
        divergence_text_top += str.tostring(dnumdiv_top)
        divergence_text_top
    if shownum and dnumdiv_bottom > 0
        divergence_text_bottom += str.tostring(dnumdiv_bottom)
        divergence_text_bottom
    if divergence_text_top != ''
        if showlast
            delete_old_neg_div_labels()
        array.push(
             neg_div_labels, 
             label.new(
             x=bar_index, 
             y=math.max(high, high[1]), 
             text=divergence_text_top, 
             color=top_label_col, 
             textcolor= (labelStyle == 'None') ? neg_div_text_col : color.white, 
             size=labelSize, 
             style= (labelStyle == 'None') ? label.style_none : label.style_label_down
             )
         )

    if divergence_text_bottom != ''
        if showlast
            delete_old_pos_div_labels()
        array.push(
             pos_div_labels, 
             label.new(
             x=bar_index, 
             y= (labelStyle == 'None') ? math.max(high, high[1]) : math.min(low, low[1]), 
             text=divergence_text_bottom, 
             color=bottom_label_col, 
             textcolor= (labelStyle == 'None') ? pos_div_text_col : color.black, 
             size=labelSize, 
             style= (labelStyle == 'None') ? label.style_none : label.style_label_up
             )
         )


alertcondition(pos_reg_div_detected, title='Positive Regular Divergence Detected', message='Positive Regular Divergence Detected')
alertcondition(neg_reg_div_detected, title='Negative Regular Divergence Detected', message='Negative Regular Divergence Detected')
alertcondition(pos_hid_div_detected, title='Positive Hidden Divergence Detected', message='Positive Hidden Divergence Detected')
alertcondition(neg_hid_div_detected, title='Negative Hidden Divergence Detected', message='Negative Hidden Divergence Detected')

alertcondition(pos_reg_div_detected or pos_hid_div_detected, title='Positive Divergence Detected', message='Positive Divergence Detected')
alertcondition(neg_reg_div_detected or neg_hid_div_detected, title='Negative Divergence Detected', message='Negative Divergence Detected')

